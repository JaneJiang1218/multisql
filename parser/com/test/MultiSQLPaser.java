/* Generated By:JJTree&JavaCC: Do not edit this line. MultiSQLPaser.java */
package test;

public class MultiSQLPaser/*@bgen(jjtree)*/implements MultiSQLPaserTreeConstants, MultiSQLPaserConstants {/*@bgen(jjtree)*/
  protected JJTMultiSQLPaserState jjtree = new JJTMultiSQLPaserState();public static void main(String args []) throws ParseException
  {
  while(true){
    System.out.println("Reading from standard input...");
    MultiSQLPaser p = new MultiSQLPaser(System.in);
    try
    {
        SimpleNode n = p.Start();
        n.dump("");
        System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
    }
  }

//TOKEN : /* ÂÆö‰πâÊ†áËØÜÁ¨? */
//{
//  < IDENTIFIER :
//    < LETTER >
//  | < LETTER > < DIGIT >
//  | (< LETTER >)+
//  | (< LETTER >)+ < POINT > (< LETTER >)+
//  | < LETTER > < POINT > (< DIGIT >)+
//  | (< DIGIT >)+
//  | < LEFTQUOTATION >
//      ( < LETTER >
//      | < DIGIT >
//      | < UNDERSCORE >
//      )*
//      < LEFTQUOTATION >
//
//  | < LETTER >
//    (
//      < LETTER >
//    | (< DIGIT >)+
//    | < UNDERSCORE >
//    )*
//    (
//      < LETTER >
//    | < DIGIT >
//    )+ >
//| < #LETTER : [ "a"-"z", "A"-"Z" ] >
//}

/* ËØ≠Ê≥ïËß£Êûê*/

//String Start() :
//{ String result;}
//{
//  result = Query()
//  {s = result;}
//  {
//    return result;
//  }
//}
  final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Query();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//String Expression() :
//{String i,s;}
//{
//    i = Query()
//    {s = i;}
//    {return s;}
//}
//
  final public void Query() throws ParseException {
 /*@bgen(jjtree) Query */
  SimpleNode jjtn000 = new SimpleNode(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SFW();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP:
      case ORDER:
        SUFFIX();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//String Query():
//{String i, j,s;}
//{
//    i = SFW()
//    {s = i;}
//    [
//        j = SUFFIX()
//        {s = s + j;}
//    ]
//    {return s;}
//}
//
////
  final public void SUFFIX() throws ParseException {
 /*@bgen(jjtree) SUFFIX */
  SimpleNode jjtn000 = new SimpleNode(JJTSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORDER:
        jj_consume_token(ORDER);
        jj_consume_token(BY);
        Attribute();
        break;
      case GROUP:
        jj_consume_token(GROUP);
        jj_consume_token(BY);
        Attribute();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//

//String SUFFIX() :
//{Token t,p; String i,s;}
//{
//    t = < ORDER > p = < BY > i = Attribute()
//    {s = t.image + p.image + i;}
//    {return s;}
//    | t = < GROUP > p = < BY > i = Attribute()
//          {s = t.image + p.image + i;}
//          {return s;}
//}
  final public void SFW() throws ParseException {
 /*@bgen(jjtree) SFW */
  SimpleNode jjtn000 = new SimpleNode(JJTSFW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SELECT);
      SelectList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JOIN:
        JoinCell();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        Conditions();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//String SFW() :
//{Token t; String i,s;}
//{
//    t = < SELECT > i = SelectList()
//    {s = t.image + i;}
//    [ i = JoinCell() {s = s + i;} ]
//    [ t = < WHERE > i = Conditions() {s = s+ t.image + i;} ]
//    {return s;}
//}

//
  final public void SingleAttSFW() throws ParseException {
 /*@bgen(jjtree) SingleAttSFW */
  SimpleNode jjtn000 = new SimpleNode(JJTSINGLEATTSFW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SELECT);
      Relation();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POINT:
        jj_consume_token(POINT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Attribute();
          break;
        case ALL:
          jj_consume_token(ALL);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JOIN:
        JoinCell();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        Conditions();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//String SingleAttSFW() :
//{Token t,p; String s,i;}
//{
//    t = < SELECT > i = Relation()
//    {s = t.image + i;}
//    [ t = < POINT > i = Attribute()
//    {s = s + t.image + i;} ]
//    [ i = JoinCell() {s = s + i;}]
//    [ t = < WHERE > i = Conditions()
//    {s = s + t.image + i;}]
//    {return s;}
//
//    | t = < SELECT > i = Relation()
//          {s = t.image + i;}
//          [ t = < POINT > p = < ALL>
//          {s = s + t.image + p.image;} ]
//          [ i = JoinCell() {s = s + i;}]
//          [ t = < WHERE > i = Conditions()
//          {s = s + t.image + i;}]
//          {return s;}
//
//}
//
  final public void SelectList() throws ParseException {
 /*@bgen(jjtree) SelectList */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SelectItem();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        label_1:
        while (true) {
          jj_consume_token(COMMA);
          SelectItem();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_1;
          }
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//String SelectList():
//{Token t; String i, s;}
//{
//    i = SelectItem()
//    {s = i;}
//    [
//      (
//        t = < COMMA > i = SelectItem()
//        {s = s + t.image + i;}
//      )
//    ]
//    {return s;}
//}

//
  final public void SelectItem() throws ParseException {
 /*@bgen(jjtree) SelectItem */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        Relation();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POINT:
          jj_consume_token(POINT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            Attribute();
            break;
          case ALL:
            jj_consume_token(ALL);
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        break;
      case COUNT:
      case SUM:
      case AVG:
      case MAX:
      case MIN:
        Func();
        jj_consume_token(LEFTPARENTHESES);
        Relation();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POINT:
          jj_consume_token(POINT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            Attribute();
            break;
          case ALL:
            jj_consume_token(ALL);
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        jj_consume_token(RIGHTPARENTHESES);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          Attribute();
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//String SelectItem() :
//{Token t,p; String i,j,s;}
//{
//  i = Relation()
//  {s = i;}
//  [ t = < POINT > i = Attribute()
//  {s = s + t.image + i;} ]
//  {return s;}
//  |  i = Relation()
//      {s = i;}
//      [ t = < POINT > p = < ALL >
//      {s = s + t.image + p;} ]
//      {return s;}
//  | i = Func() t = < LEFTPARENTHESES > j = Relation()
//    {s = i + t.image + j;}
//    [ t = < POINT > i = Attribute()
//    {s = s + t.image + i;} ]
//    t = < RIGHTPARENTHESES >
//    {s = s + t.image;}
//    [ t = < AS > i = Attribute()
//    {s = s + t.image + i;} ]
//    {return s;}
//  | i = Func() t = < LEFTPARENTHESES > j = Relation()
//        {s = i + t.image + j;}
//        [ t = < POINT > p = < ALL >
//        {s = s + t.image + p.image;} ]
//        t = < RIGHTPARENTHESES >
//        {s = s + t.image;}
//        [ t = < AS > i = Attribute()
//        {s = s + t.image + i;} ]
//   {return s;}
//}

//
  final public void JoinCell() throws ParseException {
 /*@bgen(jjtree) JoinCell */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINCELL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(JOIN);
      Joinname();
      jj_consume_token(LEFTPARENTHESES);
      JoinAttrCondition();
      jj_consume_token(RIGHTPARENTHESES);
      JoinItemList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        JoinEquCondition();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//String JoinCell() :
//{Token t,p,q; String i,j,k,l,s;}
//{
//    t = < JOIN > i = Joinname() p = < LEFTPARENTHESES > j = JoinAttrCondition() q = < RIGHTPARENTHESES > k = JoinItemList()
//    {s = t.image + i + p.image + j +q.image + k;}
//    [ l = JoinEquCondition()  {s = s + l;}]
//    {return s;}
//}

//
  final public void JoinItemList() throws ParseException {
 /*@bgen(jjtree) JoinItemList */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINITEMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      JoinItem();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        label_2:
        while (true) {
          jj_consume_token(COMMA);
          JoinItem();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[17] = jj_gen;
            break label_2;
          }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//String JoinItemList() :
//{String i,s; Token t;}
//{
//    i = JoinItem()
//    {s = i;}
//    [
//      (
//        t = < COMMA > i = JoinItem()
//        {s = s + t.image + i;}
//      )+
//    ]
//    {return s;}
//}
//
  final public void JoinAttrCondition() throws ParseException {
 /*@bgen(jjtree) JoinAttrCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINATTRCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EquCondition();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        label_3:
        while (true) {
          jj_consume_token(COMMA);
          EquCondition();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[19] = jj_gen;
            break label_3;
          }
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//String JoinAttrCondition() :
//{String i, s; Token t;}
//{
//    i = EquCondition()
//    {s = i;}
//    [
//      (t = < COMMA > i = EquCondition()
//      {s = s + t.image + i;})+
//    ]
//    {return s;}
//}
//
  final public void EquCondition() throws ParseException {
 /*@bgen(jjtree) EquCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Attribute();
      jj_consume_token(EQUAL);
      Relation();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POINT:
        jj_consume_token(POINT);
        Attribute();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//String EquCondition() :
//{String i,j; Token t; String s;}
//{
//    i = Attribute() t = < EQUAL > j = Relation()
//    {s = i + t.image + j;}
//    [
//      t = < POINT > i = Attribute()
//      {s = s + t.image + i;}
//    ]
//
//    {return s;}
//}
//
  final public void JoinItem() throws ParseException {
 /*@bgen(jjtree) JoinItem */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        Relation();
        break;
      case SELECT:
        SingleAttSFW();
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//String JoinItem() :
//{String i; String s;}
//{
//    i = SingleAttSFW()
//    {s = i;}
//    {return s;}
//
//    | i = Relation()
//      {s = i;}
//      {return s;}
//}

//
  final public void JoinEquCondition() throws ParseException {
 /*@bgen(jjtree) JoinEquCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINEQUCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Relation();
      jj_consume_token(POINT);
      Attribute();
      jj_consume_token(EQUAL);
      Relation();
      jj_consume_token(POINT);
      Attribute();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        label_4:
        while (true) {
          jj_consume_token(AND);
          Relation();
          jj_consume_token(POINT);
          Attribute();
          jj_consume_token(EQUAL);
          Relation();
          jj_consume_token(POINT);
          Attribute();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
            ;
            break;
          default:
            jj_la1[23] = jj_gen;
            break label_4;
          }
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//String JoinEquCondition() :
//{String i,j,k,l; String s; Token t,p,q,r;}
//{
//    i = Relation() t = < POINT > j = Attribute() p = < EQUAL > k = Relation() q = < POINT > l = Attribute()
//    {s = i + t.image + j + p.image + k + q.image + l;}
//    [
//      (
//        r = < AND > i = Relation() t = < POINT > j = Attribute() p = < EQUAL > k = Relation() q = < POINT > l = Attribute()
//        {s = s + r.image + i + t.image + j + p.image + k + q.image + l;}
//      )+
//    ]
//
//    {return s;}
//}

//
  final public void Func() throws ParseException {
 /*@bgen(jjtree) Func */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COUNT:
        jj_consume_token(COUNT);
        break;
      case SUM:
        jj_consume_token(SUM);
        break;
      case AVG:
        jj_consume_token(AVG);
        break;
      case MAX:
        jj_consume_token(MAX);
        break;
      case MIN:
        jj_consume_token(MIN);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//String Func() :
//{Token t; }
//{
//    t = < COUNT >
//    {return t.image;}
//    | t = < SUM >
//    {return t.image;}
//    | t = < AVG >
//    {return t.image;}
//    | t = < MAX >
//    {return t.image;}
//    | t = < MIN >
//    {return t.image;}
//}

//
  final public void Conditions() throws ParseException {
 /*@bgen(jjtree) Conditions */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Condition();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        label_5:
        while (true) {
          jj_consume_token(AND);
          Condition();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
            ;
            break;
          default:
            jj_la1[26] = jj_gen;
            break label_5;
          }
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//String Conditions() :
//{Token t; String i; String j; String s;}
//{
//    i = Condition()
//    {s = i;}
//    [
//      (
//        t = < AND > j = Condition()
//        {s = s+ t.image + j;}
//      )+
//    ]
//    {return s;}
//}

//
  final public void Condition() throws ParseException {
 /*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Relation();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POINT:
        jj_consume_token(POINT);
        Attribute();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      Action();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//String Condition() :
//{String s; String i; String j; String k; Token t;}
//{
//    i = Relation()
//    {s = i;}
//    [
//        t = < POINT > j = Attribute()
//        {s = s + t.image + j;}
//    ]
//    k = Action()
//    {s = s + k;}
//
//    {return s;}

//}
  final public void Action() throws ParseException {
 /*@bgen(jjtree) Action */
  SimpleNode jjtn000 = new SimpleNode(JJTACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        Equal();
        break;
      case BETWEEN:
        jj_consume_token(BETWEEN);
        Between();
        jj_consume_token(AND);
        Between();
        break;
      case IN:
        jj_consume_token(IN);
        jj_consume_token(LEFTPARENTHESES);
        In();
        jj_consume_token(RIGHTPARENTHESES);
        break;
      case HIGHER:
        jj_consume_token(HIGHER);
        Higher();
        break;
      case LOWER:
        jj_consume_token(LOWER);
        Lower();
        break;
      case EHIGHER:
        jj_consume_token(EHIGHER);
        Higher();
        break;
      case ELOWER:
        jj_consume_token(ELOWER);
        Lower();
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//

//String Action() :
//{Token t; Token k; Token l; String s;String i; String j;}
//{
//    t = < EQUAL > i = Equal()
//    { s = t.image + i;}
//    {return s;}
//    | t = < BETWEEN > i = Between() k = < AND > j = Between()
//    { s = t.image + i + k.image + j;}
//    {return s;}
//    | t = < IN > k = < LEFTPARENTHESES > i = In() l = < RIGHTPARENTHESES >
//    {s = t.image + k.image + i + l.image; }
//    { return s; }
//    | t = < HIGHER > i = Higher()
//    {s = t.image + i; }
//    { return s; }
//    | t = < LOWER > i = Lower()
//    { s = t.image + i; }
//    {return s; }
//    | t = < EHIGHER > i = Higher()
//    {s = t.image + i; }
//    {return s;}
//    | t = < ELOWER > i = Lower()
//    {s = t.image + i;}
//    {return s;}
//}

//String Equal() :
//{String s; Token t;}
//{
//
//  t= < INTEGER_LITERAL >
//  { s = t.image;}
//  { return s;}
//
//  | t = < FLOAT_LITERAL >
//  { s = t.image;}
//  {return s;}
//
//  | s = Pattern()
//  {return s;}
//
//  | s = Attribute()
//  { return s;}
//
//}
//
//String Between() :
//{String s; Token t;}
//{
//
//  t= < INTEGER_LITERAL >
//  { s = t.image;}
//  { return s;}
//
//  | t = < FLOAT_LITERAL >
//  { s = t.image;}
//  {return s;}
//
//  | s = Pattern()
//  {return s;}
//
//}
  final public void Equal() throws ParseException {
 /*@bgen(jjtree) Equal */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      case FLOAT_LITERAL:
        jj_consume_token(FLOAT_LITERAL);
        break;
      case LQUOTATION:
        Pattern();
        break;
      case IDENTIFIER:
        Attribute();
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Between() throws ParseException {
 /*@bgen(jjtree) Between */
  SimpleNode jjtn000 = new SimpleNode(JJTBETWEEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      case FLOAT_LITERAL:
        jj_consume_token(FLOAT_LITERAL);
        break;
      case LQUOTATION:
        Pattern();
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//
  final public void In() throws ParseException {
 /*@bgen(jjtree) In */
  SimpleNode jjtn000 = new SimpleNode(JJTIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        SFW();
        break;
      case LQUOTATION:
        jj_consume_token(LQUOTATION);
        IDENTIFIER();
        jj_consume_token(LQUOTATION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          label_6:
          while (true) {
            jj_consume_token(COMMA);
            jj_consume_token(LQUOTATION);
            IDENTIFIER();
            jj_consume_token(LQUOTATION);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[32] = jj_gen;
              break label_6;
            }
          }
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//String In() :
//{Token t; Token k; String s;String a;}
//{
//
//   a = SFW()
//   {s = a;}
//   {return s;}
//
//   | t = < LQUOTATION > a = IDENTIFIER() t = < LQUOTATION >
//     {s = t.image + a + t.image;}
//     [
//        (
//            k = < COMMA > t = < LQUOTATION > a = IDENTIFIER() t = < LQUOTATION >
//            {s = s + k.image + t.image + a + t.image;}
//         )+
//     ]
//
//   {return s;}
//
//}

//

//String Higher() :
//{String s; Token t;}
//{
//
//  t= < INTEGER_LITERAL >
//  { s = t.image;}
//  { return s;}
//
//  | t = < FLOAT_LITERAL >
//  { s = t.image;}
//  {return s;}
//
//  | s = Pattern()
//  {return s;}
//
//
//}
////
//String Lower() :
//{String s; Token t;}
//{
//
//  t= < INTEGER_LITERAL >
//  { s = t.image;}
//  { return s;}
//
//  | t = < FLOAT_LITERAL >
//  { s = t.image;}
//  {return s;}
//
//  | s = Pattern()
//  {return s;}
//
//
//}
  final public void Higher() throws ParseException {
 /*@bgen(jjtree) Higher */
  SimpleNode jjtn000 = new SimpleNode(JJTHIGHER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      case FLOAT_LITERAL:
        jj_consume_token(FLOAT_LITERAL);
        break;
      case LQUOTATION:
        Pattern();
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Lower() throws ParseException {
 /*@bgen(jjtree) Lower */
  SimpleNode jjtn000 = new SimpleNode(JJTLOWER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      case FLOAT_LITERAL:
        jj_consume_token(FLOAT_LITERAL);
        break;
      case LQUOTATION:
        Pattern();
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//
///*-------------------*/

/*-------------------*/
  final public void Joinname() throws ParseException {
 /*@bgen(jjtree) Joinname */
  SimpleNode jjtn000 = new SimpleNode(JJTJOINNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Attribute();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Attribute() throws ParseException {
 /*@bgen(jjtree) Attribute */
  SimpleNode jjtn000 = new SimpleNode(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      IDENTIFIER();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Relation() throws ParseException {
 /*@bgen(jjtree) Relation */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      IDENTIFIER();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Pattern() throws ParseException {
 /*@bgen(jjtree) Pattern */
  SimpleNode jjtn000 = new SimpleNode(JJTPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LQUOTATION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        IDENTIFIER();
        break;
      case STRDIGITS:
        jj_consume_token(STRDIGITS);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LQUOTATION);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*-------------------*/
  final public void IDENTIFIER() throws ParseException {
 /*@bgen(jjtree) IDENTIFIER */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  /** Generated Token Manager. */
  public MultiSQLPaserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[38];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x600,0x600,0x80,0x40,0x8000000,0x2000000,0x80,0x40,0x1000000,0x1000000,0x8000000,0x2000000,0x8000000,0x2000000,0x8000,0x3e0000,0x0,0x1000000,0x1000000,0x1000000,0x1000000,0x2000000,0x20,0x2000,0x2000,0x3e0000,0x2000,0x2000,0x2000000,0x80410000,0x0,0x0,0x1000000,0x1000000,0x20,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x400,0x0,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x3c,0x4c1,0xc1,0x0,0x0,0x1,0xc1,0xc1,0x500,};
   }

  /** Constructor with InputStream. */
  public MultiSQLPaser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MultiSQLPaser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MultiSQLPaserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MultiSQLPaser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MultiSQLPaserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MultiSQLPaser(MultiSQLPaserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MultiSQLPaserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 38; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
